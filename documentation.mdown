# Web Accelerator Data Server
This is a guide that explains how the web accelerator data server works, how to set it up, and how to use it.  In short, the web accelerator data server is an API for getting accelerator data: a way to get channel access accelerator data over the web.  You send it HTTP requests (from a browser, a command line tool like WGET or curl, or from a custom application), and it returns the data from a PV in the [JSON format](http://www.json.org "JSON format").  The server is written as a [node.js](http://nodejs.org "node.js") application, and uses [EPICS](http://www.aps.anl.gov/epics/ "EPICS") (specifically Channel Access) to communicate with the accelerator. 

## Installation and Set-up
The web accelerator data server is built on a few separate pieces:
1.	Node.js, which handles HTTP requests for accelerator data.
2.	EPICS, which communicates with the accelerator, getting data from various accelerator devices (for example: Beam Position Monitors, Power Supplies, Thermocouples, Motor Controllers, etc).
3.	[NGINX](http://nginx.org "NGINX"), a web server which receives all the HTTP requests, and in the case of accelerator data requests, forwards them to the node.js server, or in the case of requests for static data, serves it up.

Instructions for installing these components will vary depending on where you are installing it.  This guide is written for installing on a Red Hat Enterprise Linux (RHEL) 5 machine.  Some steps may be simpler or more involved depending on what is available via your OS's package manager.

### Node.js
Node.js is not available in the RHEL 5 package repository (although it is in the Extra Packages for Enterprise Linux repository in RHEL 6).  We'll install it from source.  A great resource is the [official installation guide](https://github.com/joyent/node/wiki/Installation "Official Installation Guide").  The document you are reading now just regurgitates the official installation guide.

To compile node.js, you'll need a somewhat-recent version of python (2.6 or above).  This should be pretty straightforward to get via your package manager.  

First, we need to download the latest source tarball, which is availble at [http://nodejs.org/dist/node-latest.tar.gz](http://nodejs.org/dist/node-latest.tar.gz).  Once you've got it, unzip it, configure it, and make it:   
	tar xzvf node-latest.tar.gz && cd node-*   
	./configure && make -j 3 && sudo make install

NOTE: on lcls-prod03, I could not write to /usr/local/bin, so I had to do './configure --prefix=/opt/node' instead.

Should be that easy!

### EPICS
EPICS needs to be installed from source.  The version you want to install depends more on the accelerator than on the web accelerator data server - choose the version that you think will work with the accelerator.  The EPICS base releases are available here: [http://www.aps.anl.gov/epics/download/base/index.php](http://www.aps.anl.gov/epics/download/base/index.php).  Setting up EPICS is not simple, and quite a bit of it depends on your particular environment.

Luckily, at SLAC EPICS is already installed in a director in AFS space, so we don't have to actually install it ourselves.  Make sure you run the EPICS Environment setup script in your .bashrc file and you should be good to go:
  if [ -f /afs/slac/g/lcls/tools/script/ENVS.bash ]; then
      . /afs/slac/g/lcls/tools/script/ENVS.bash
  fi
  
Make sure you are in the bash shell before you run the server - if you aren't, the environment won't be set up right, and no channel access stuff will work.

### Nginx
Nginx is available in most package managers, or you can compile it from source.  The documentation for installing it is available on their wiki, and it is pretty good: [http://wiki.nginx.org/Install](http://wiki.nginx.org/Install).  I compiled it from source, because on lcls-prod03 I can't get to the EPEL package repository.  Like with node, I couldn't write to /usr/local/bin, so I did './configure --prefix=/opt/nginx' to install it to that directory.  Once you have installed it, you need to configure it using the /conf/nginx.conf file.  The config file we use will configure nginx to host all requests, except specifically those which need to be passed to the node.js server.

You'll want to make a new user that runs the nginx process.  In RHEL 5 or 6, run this:
  'sudo /usr/sbin/useradd -M --shell /sbin/nologin --home-dir /opt/nginx nginx'

A helpful script to automate starting and stopping the nginx process is available from the Linode library: [https://library.linode.com/assets/662-init-rpm.sh](https://library.linode.com/assets/662-init-rpm.sh).  Rename it to something that makes sense (like init-nginx.sh), then copy it to '/etc/rc.d/init.d/nginx'.  Now you can start the server using this command: 'sudo /etc/rc.d/init.d/nginx start'.  Other commands exist too, like 'stop' and 'restart'.

Once nginx is ready to run, you have to configure it.  We want to send all PV data requests to the node server, have every request for anything in the /webcud/ subdirectory go to the NFS /webcud/ directory, and have everything else served from /opt/nginx/html/.  I've saved a copy of the nginx config file to do this in my AFS space as 'nginx.conf'.

### caserver
This is the node.js application that responds to user HTTP requests with channel access data.  It depends on the socket.io library, which adds support for websockets.  Unfortunately, it is a little annyoing to install socket.io on servers without internet access, like lcls-prod03.  Your best bet is to install node.js on a computer that does have internet access, then run 'npm install socket.io' to install it locally.  It will make a folder called 'node_modules' with a 'socket.io' subdirectory.  Compress the socket.io directory:
  tar cvzf socket.io.tar.gz socket.io
and then copy it into the node_modules directory in the caserver directory on the server.  Unpack it:
  tar xvzf socket.io.tar.gz
Then go back into the caserver directory and run 'npm rebuild' to reinstall the module using the local data.
On RHEL 6, we can make an upstart script to automatically start and stop the node process whenever the server restarts, and also make it easier to stop and start the node process on-demand.  I've saved one of these in my AFS space as 'nodejs.conf'.  You can use the command
  'sudo /sbin/start nodejs' to start the server and
  'sudo /sbin/stop nodejs' to stop the server.  This script should also automatically start node when the server starts, although I haven't seen it happen yet.
  
